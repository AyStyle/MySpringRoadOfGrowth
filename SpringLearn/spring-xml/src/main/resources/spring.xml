<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
               http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
">
    
    <bean id="transferService" class="ankang.spring.learn.service.impl.TransferServiceImpl">
        <property name="accountDao" ref="accountDao"/>
    </bean>
    
    <bean id="proxyFactory" class="ankang.spring.learn.factory.ProxyFactory">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    
    <bean id="transactionManager" class="ankang.spring.learn.utils.TransactionManager">
        <property name="connectionUtils" ref="connectionUtils"/>
    </bean>
    
    <!-- Spring ioc实例化Bean对象的三种方式 -->
    
    <!-- 方式一：使用无参构造器（推荐） -->
    <!--    <bean id="connectionUtils" class="ankang.spring.learn.utils.ConnectionUtils"></bean>-->
    <!--
        scope：定义bean的作用范围
            1.singleton：单例，IOC容器中只有一个该类对象。生命周期随IOC容器的销毁而销毁
            2.prototype：原型，每次使用该类的实例对象，都返回一个新的对象，生命周期由自己控制，失去引用后会被垃圾回收器销毁
        init-method：指定初始化方法
        destroy-method：指定销毁方法
     -->
    <bean id="connectionUtils" class="ankang.spring.learn.utils.ConnectionUtils" scope="singleton" init-method="init" destroy-method="destroy"></bean>
    
    <!-- 另外两种是把我们自己new的对象加入到SpringIOC中进行管理 -->
    <!--
        方式二：静态方法创建对象
        factory-method：指定类的静态方法
     -->
    <!--    <bean id="connectionUtils" class="ankang.spring.learn.utils.ConnectionUtils" factory-method="getInstance"></bean>-->
    
    <!--
        方式三：实例方法，引用已经创建的对象，来创建另外一个对象
        factory-bean：指定实例对象
        factory-method：指定实例对象的方法创建对象
     -->
    <!--    <bean id="createBeanFactory" class="ankang.spring.learn.factory.CreateBeanFactory"></bean>-->
    <!--    <bean id="connectionUtils" factory-bean="createBeanFactory" factory-method="getInstance"></bean>-->
    
    <!-- Spring set注入 -->
    <bean id="accountDao" class="ankang.spring.learn.dao.impl.JdbcAccountDaoImpl">
        <!--
            set注入使用property标签：
                1.注入bean对象，使用ref属性
                2.注入普通值，使用value属性
        -->
        <property name="connectionUtils" ref="connectionUtils"/>
        <property name="name" value="ankang"/>
        <property name="age" value="18"/>
        
        <!--
            set注入复杂类型数据：
                1.array：注入数组对象
                2.map：注入map对象
                2.set：注入set对象
                2.list：注入list对象
                2.props：注入property对象
        -->
        <property name="strings">
            <array>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </array>
        </property>
        
        <property name="stringMap">
            <map>
                <entry key="key1" value="value1"/>
                <entry key="key2" value="value2"/>
            </map>
        </property>
        
        <property name="stringSet">
            <set>
                <value>set1</value>
                <value>set1</value>
                <value>set2</value>
            </set>
        </property>
        
        <property name="stringList">
            <list>
                <value>list1</value>
                <value>list2</value>
                <value>list3</value>
            </list>
        </property>
        
        <property name="stringProperties">
            <props>
                <prop key="pro1">value1</prop>
                <prop key="pro2">value2</prop>
            </props>
        </property>
    </bean>
    
    <!-- Spring 构造器注入 -->
    <!--    <bean id="accountDao" class="ankang.spring.learn.dao.impl.JdbcAccountDaoImpl">-->
    <!--        &lt;!&ndash;-->
    <!--            构造器注入使用constructor-arg标签：-->
    <!--                1.注入bean对象，使用ref属性-->
    <!--                2.注入普通值，使用value属性-->
    <!--                3.index设置构造器参数位置（不推荐）-->
    <!--                4.name对应构造器参数名称（推荐）-->
    <!--        &ndash;&gt;-->
    <!--        <constructor-arg name="name" value="ankang"/>-->
    <!--        <constructor-arg name="connectionUtils" ref="connectionUtils"/>-->
    <!--        <constructor-arg name="age" value="18"/>-->
    <!--    </bean>-->
    
    <!--
        进行AOP相关的xml配置
        配置AOP的过程就是把AOP相关术语落地
     -->
    
    <!-- 横切逻辑bean -->
    <bean id="logUtils" class="ankang.spring.learn.utils.LogUtils"></bean>
    
    <!-- 使用config标签，表明开始aop配置，在内部配置切面aspect -->
    <aop:config>
        <!-- 配置切面aspect -->
        <aop:aspect id="logAspect" ref="logUtils">
            <!--
                配置切入点，锁定感兴趣的方法，使用aspectj语法表达式
                切入点标签：
                    pointcut：配置切入点
                        属性：
                            id：切入点id配置
                            expression：切入点的aspectj表达式
            -->
            <aop:pointcut id="pt1" expression="execution(public void ankang.spring.learn.service.TransferService.transfer(String,String,int))"/>
            
            <!--
                方位信息：织入切入点
                方位标签：
                    before：切入点方法之前触发
                    after：切入点之后触发，无论是否异常
                    after-return：切入点正常执行完毕之后触发，如果执行过程发生了异常，则：触发after-throwing或抛出异常
                    after-throwing：切入点执行异常时触发，切入点正常执行完毕之后不会触发
                    round：环绕增强，可以控制原有的业务逻辑是否执行且能实现其他标签的功能
                    declare-parents：
                方位标签属性：
                    method：
                    pointcut-ref：
                    pointcut：
                    arg-names：
             -->
            <aop:before method="beforeMethod" pointcut-ref="pt1"/>
            <aop:after method="afterMethod" pointcut="execution(public void ankang.spring.learn.service.TransferService.transfer(String,String,int)))"/>
        </aop:aspect>
    </aop:config>

</beans>