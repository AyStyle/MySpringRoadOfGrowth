<?xml version="1.0" encoding="UTF-8" ?>
<!-- 配置全部对象延迟加载：default-lazy-init="true" -->
<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           https://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           https://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop
           https://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx
           https://www.springframework.org/schema/tx/spring-tx.xsd
">
    
    <!-- 配置开启注解扫描，base-package指定扫描的包路径 -->
    <context:component-scan base-package="ankang.spring.learn"/>
    
    <!-- 引入外部资源文件 -->
    <context:property-placeholder location="classpath:druid.properties"/>
    
    <!--
        Spring xml + 注解开发：
            xml：用在第三方开发的jar包上
            注解：用在自己项目开发的代码上
    -->
    <!-- 创建第三方druid数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${druid.driver}"/>
        <property name="url" value="${druid.url}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>
    </bean>
    
    <!--
        FactoryBean Demo
        获取Bean对象直接使用id属性
        获取FactoryBean对象在id属性前加上&：&id
    -->
    <bean id="companyBean" class="ankang.spring.learn.factory.CompanyFactoryBean">
        <property name="companyInfo" value="大公司,地球"/>
    </bean>
    
    
    <!--
        使用注解声明bean实例对象
            1.@Component：表示此类为实例对象
            2.@Controller：表示控制层实例对象
            3.@Service：表示服务层实例对象
            4.@Repository：表示dao层实例对象
            注意：@Controller、@Service和@Repository是@Component的别名注解，主要方便区分业务层
            
        依赖注入：
            1.@Autowired：自动实现依赖注入，注入是按照类型（接口）注入的，被注解的字段可以省略set方法
              @Qualifier：如果@Autowired不能唯一锁定注入对象，则可以结合该注解指定特定的对象
            
            2.@Resource（不推荐）：使用J2EE注解注入，需要引入javax-annotation包
     -->
    <!--    <bean id="accountDao" class="ankang.spring.learn.dao.impl.JdbcAccountDaoImpl">-->
    <!--        <property name="connectionUtils" ref="connectionUtils"/>-->
    <!--    </bean>-->
    <!--    -->
    <!--    <bean id="transferService" class="ankang.spring.learn.service.impl.TransferServiceImpl">-->
    <!--        <property name="accountDao" ref="accountDao"/>-->
    <!--    </bean>-->
    <!--    -->
    <!--    <bean id="proxyFactory" class="ankang.spring.learn.factory.ProxyFactory">-->
    <!--        <property name="transactionManager" ref="transactionManager"/>-->
    <!--    </bean>-->
    <!--    -->
    <!--    <bean id="transactionManager" class="ankang.spring.learn.utils.TransactionManager">-->
    <!--        <property name="connectionUtils" ref="connectionUtils"/>-->
    <!--    </bean>-->
    
    <!--
        lazy-init方法配置bean对象的延迟加载，true延迟加载，false立即加载，默认：false
        @Lazy：注解开启对象延迟加载
    -->
    <bean id="lazyResult" class="ankang.spring.learn.pojo.Result" lazy-init="true" init-method="initMethod"/>
    
    <!--
        进行AOP相关的xml + 注解配置
        配置AOP的过程就是把AOP相关术语落地
        
        @EnableAspectJAutoProxy：启动AOP配置（纯注解模式使用）
        
        @Aspect：表明此类为切面类
        @Pointcut：表明该方法是切入点
        @Before：切入点方法之前触发
        @After：切入点之后触发，无论是否异常
        @AfterThrowing：切入点执行异常时触发，切入点正常执行完毕之后不会触发
        @AfterReturning：切入点正常执行完毕之后触发，如果执行过程发生了异常，则：触发@AfterThrowing或抛出异常
        @Around：环绕增强，可以控制原有的业务逻辑是否执行且能实现其他标签的功能
     -->
    
    <!-- 横切逻辑bean -->
    <!--    <bean id="logUtils" class="ankang.spring.learn.utils.LogUtils"></bean>-->
    
    <!--    &lt;!&ndash; 使用config标签，表明开始aop配置，在内部配置切面aspect &ndash;&gt;-->
    <!--    <aop:config>-->
    <!--        &lt;!&ndash; 配置切面aspect &ndash;&gt;-->
    <!--        <aop:aspect id="logAspect" ref="logUtils">-->
    <!--            &lt;!&ndash;-->
    <!--                配置切入点，锁定感兴趣的方法，使用aspectj语法表达式-->
    <!--                切入点标签：-->
    <!--                    pointcut：配置切入点-->
    <!--                        属性：-->
    <!--                            id：切入点id配置-->
    <!--                            expression：切入点的aspectj表达式-->
    <!--            &ndash;&gt;-->
    <!--            <aop:pointcut id="pt1" expression="execution(public void ankang.spring.learn.service.TransferService.transfer(String,String,int))"/>-->
    <!--            -->
    <!--            &lt;!&ndash;-->
    <!--                方位信息：织入切入点-->
    <!--                方位标签：-->
    <!--                    before：切入点方法之前触发-->
    <!--                    after：切入点之后触发，无论是否异常-->
    <!--                    after-return：切入点正常执行完毕之后触发，如果执行过程发生了异常，则：触发after-throwing或抛出异常-->
    <!--                    after-throwing：切入点执行异常时触发，切入点正常执行完毕之后不会触发-->
    <!--                    round：环绕增强，可以控制原有的业务逻辑是否执行且能实现其他标签的功能-->
    <!--                    declare-parents：-->
    <!--                方位标签属性：-->
    <!--                    method：-->
    <!--                    pointcut-ref：-->
    <!--                    pointcut：-->
    <!--                    arg-names：-->
    <!--             &ndash;&gt;-->
    <!--            <aop:before method="beforeMethod" pointcut-ref="pt1"/>-->
    <!--            <aop:after method="afterMethod" pointcut="execution(public void ankang.spring.learn.service.TransferService.transfer(String,String,int)))"/>-->
    <!--        </aop:aspect>-->
    <!--    </aop:config>-->
    
    <!--
        开启aop注解驱动
        proxy-target-class：true强制使用cglib动态代理
     -->
    <aop:aspectj-autoproxy/>
    
    <!--
    声明式事务配置
-->
    <!-- 事务控制横切逻辑bean -->
    <bean id="transaction" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg name="dataSource" ref="dataSource"/>
    </bean>
    
    <!--
        定义事务
        @Transactional：表示该类或该方法需要事务管理
     -->
<!--    <tx:advice id="txAdvice" transaction-manager="transaction">-->
<!--        &lt;!&ndash; 定义事务细节、隔离级别、传播行为 &ndash;&gt;-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash;-->
<!--                对占比率高的方法进行配置：-->
<!--                    name：方法名称-->
<!--                    read-only：是否只读-->
<!--                    propagation：事务的传播行为-->
<!--                    isolation：事务的隔离级别-->
<!--                    rollback-for：回滚配置-->
<!--                    no-rollback-for：不回滚配置-->
<!--                    timeout：设置超时时间，单位秒，-1代表没有超时时间-->
<!--             &ndash;&gt;-->
<!--            -->
<!--            &lt;!&ndash; 一般性配置 &ndash;&gt;-->
<!--            <tx:method name="*" read-only="false" propagation="REQUIRED" isolation="DEFAULT"/>-->
<!--            &lt;!&ndash; 针对查询的特殊配置，会覆盖一般性配置 &ndash;&gt;-->
<!--            <tx:method name="query*" read-only="true" propagation="SUPPORTS" isolation="DEFAULT"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->
<!--    -->
<!--    <aop:config>-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut="execution(public void ankang.spring.learn.service.TransferService.*(..)))"/>-->
<!--    </aop:config>-->

    <!-- 声明式事务注解驱动 -->
    <tx:annotation-driven transaction-manager="transaction"/>

</beans>