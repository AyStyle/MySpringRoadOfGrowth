<?xml version="1.0" encoding="UTF-8" ?>
<!-- 配置全部对象延迟加载：default-lazy-init="true" -->
<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           https://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           https://www.springframework.org/schema/context/spring-context.xsd
">
    
    <!-- 配置开启注解扫描，base-package指定扫描的包路径 -->
    <context:component-scan base-package="ankang.spring.learn"/>
    
    <!-- 引入外部资源文件 -->
    <context:property-placeholder location="classpath:druid.properties"/>
    
    <!--
        Spring xml + 注解开发：
            xml：用在第三方开发的jar包上
            注解：用在自己项目开发的代码上
    -->
    <!-- 创建第三方druid数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${druid.driver}"/>
        <property name="url" value="${druid.url}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>
    </bean>
    
    <!--
        使用注解声明bean实例对象
            1.@Component：表示此类为实例对象
            2.@Controller：表示控制层实例对象
            3.@Service：表示服务层实例对象
            4.@Repository：表示dao层实例对象
            注意：@Controller、@Service和@Repository是@Component的别名注解，主要方便区分业务层
            
        依赖注入：
            1.@Autowired：自动实现依赖注入，注入是按照类型（接口）注入的，被注解的字段可以省略set方法
              @Qualifier：如果@Autowired不能唯一锁定注入对象，则可以结合该注解指定特定的对象
            
            2.@Resource（不推荐）：使用J2EE注解注入，需要引入javax-annotation包
     -->
    <!--    <bean id="accountDao" class="ankang.spring.learn.dao.impl.JdbcAccountDaoImpl">-->
    <!--        <property name="connectionUtils" ref="connectionUtils"/>-->
    <!--    </bean>-->
    <!--    -->
    <!--    <bean id="transferService" class="ankang.spring.learn.service.impl.TransferServiceImpl">-->
    <!--        <property name="accountDao" ref="accountDao"/>-->
    <!--    </bean>-->
    <!--    -->
    <!--    <bean id="proxyFactory" class="ankang.spring.learn.factory.ProxyFactory">-->
    <!--        <property name="transactionManager" ref="transactionManager"/>-->
    <!--    </bean>-->
    <!--    -->
    <!--    <bean id="transactionManager" class="ankang.spring.learn.utils.TransactionManager">-->
    <!--        <property name="connectionUtils" ref="connectionUtils"/>-->
    <!--    </bean>-->
    
    <!--
        lazy-init方法配置bean对象的延迟加载，true延迟加载，false立即加载，默认：false
        @Lazy：注解开启对象延迟加载
    -->
    
    <bean id="lazyResult" class="ankang.spring.learn.pojo.Result" lazy-init="true"/>

</beans>